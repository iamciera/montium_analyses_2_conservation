p
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
plot(p, like.rescale)
sum(y)
N
beta.hyper + N - sum(y)
alpha.hyper + sum(y)
beta.hyper
alpha.hyper
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
jags.bb <- function() {
for (i in 1:N) {
y[i] ~ dbin(p, 1)
}
quit
jags.bb <- function() {
for (i in 1:N) {
y[i] ~ dbin(p, 1)
}
# prior on p
p ~ dbeta(alpha.hyper, beta.hyper)
}
write.model(jags.bb, "jagsbb.txt")
file.show("jagsbb.txt")
file.show("jagsbb.txt")
alpha.hyper <- 1
beta.hyper <- 1
?dbin
p=runif(1)
p
p=runif(1)
p
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
?runif
inits <- function() { list(p=runif(2)) }
inits <- function() { list(p=runif(2)) }
{ list(p=runif(2)) }
{ list(p=runif(2)) }
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
library(R2jags)
install.packages("R2jags")
library(R2jags)
library(R2jags)
install.packages("R2jags")
library(R2jags)
library(Rjags)
library(R2jags)
install.packages("rjags")
library(R2jags)
library(rjags)
install.packages("rjags")
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
install.packages("R2jags")
library(R2jags)
jagsfit.mcmc <- as.mcmc(jagsfit)
xyplot(jagsfit.mcmc)
densityplot(jagsfit.mcmc)
autocorr.plot(jagsfit.mcmc)
codamenu()
library(R.utils)
library(rstan)
library(rjags)
library(R2jags)
library(manipulate)
library(MCMCpack)
library(R2WinBUGS)
p <- seq(from=0.005, to=0.995, by=0.005)
p
manipulate( # requires RStudio
{plot(p, dbeta(p, alpha.hyper, beta.hyper),
col="blue", lwd=2, type="l", las=1, bty="n",
ylim=c(0, 8), ylab="density",
main="Beta prior distribution")
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
alpha.hyper <- 81
beta.hyper <- 219
plot(p, dbeta(p, alpha.hyper, beta.hyper),
ylim=c(0, 15), ylab="density",
col="blue", lwd=2, type="l", las=1, bty="n",
main="Beta prior distribution")
# You choose beta prior distribution depending on prior knowledge?
# How do you choose alpha and beta?
# answers well here http://stats.stackexchange.com/questions/47771/what-is-the-intuition-behind-beta-distribution
?dbeta()
?manipulate()
?rbinom
# This is sampling from a binomial distribution. "So a simulation of "observing some data"
p.true <- 0.7
N <- 30
y <- rbinom(N, size=1, prob=p.true)
table(y)/N
## Likelihood of the data at each possible value of p
## (http://en.wikipedia.org/wiki/Bernoulli_distribution)
likelihood <- sapply(p, function(p) { prod(p^y * (1-p)^(1-y)) } )
plot(p, likelihood, lwd=2, las=1, bty="n", type="l")
## (To help with visibility)
like.rescale <- 4 * likelihood/max(likelihood)
## To get the posterior, multiply Prior x Likelihood at each value of p
## Or easier: Prior is conjugate, so posterior is Beta distributed with
##   alpha = alpha + k
##   beta = beta + N - k
## Where N = sample size, k = number of "successes".
## The prior is most influential when data are sparse.
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
## Inferences about the quantity of interest come from the posterior:
##   A best guess (posterior mean or mode), as well as a statement of
##   uncertainty, typically expressed as a "credible interval" or range
##   representing percent area of highest posterior density.
####################################################################################
####################################################################################
## What if an analytical solution isn't practical?
## Use fast computers and Markov chain Monte Carlo (MCMC) sampling
## JAGS = "Just Another Gibbs Sampler" to take random draws from the posterior
##   to find the shape of the posterior distribution.
## Very similar to BUGS = "Bayesian inference Using Gibbs Sampling"
# Specify the Beta-Bernoulli model
jags.bb <- function() {
for (i in 1:N) {
}
y[i] ~ dbin(p, 1)
# prior on p
p ~ dbeta(alpha.hyper, beta.hyper)
write.model(jags.bb, "jagsbb.txt")
}
file.show("jagsbb.txt")
# Specify hyperpriors and initial values
alpha.hyper <- 1
beta.hyper <- 1
inits <- function() { list(p=runif(1)) }
?runif
# Fit the model
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
plot(jagsfit)
traceplot(jagsfit, mfrow=c(1,1), "p")
## There are additional MCMC diagnostics in the coda package
jagsfit.mcmc <- as.mcmc(jagsfit)
xyplot(jagsfit.mcmc)
densityplot(jagsfit.mcmc)
autocorr.plot(jagsfit.mcmc)
codamenu()
install.packages("R2jags")
install.packages("rjags")
library(R2jags)
library(R2jags)
library(rjags)
library("lubridate")
install.packages("lubridate")
library("devtool")
library("devtools")
create("packageTest")
install.packages("roxygen2")
install.packages("colourlovers")
install.packages("colorspace")
library(colorspace)
library(colourlovers)
library(colourlovers)
swatch(clpalettes('random'))
swatch(clpalettes('random'))
swatch(clpalettes('random'))
clcolors('top')[[1]]
clcolors('top')[[10]]
clcolors('top')[10]
clcolors('top')[10]
?hsv
hsv(1,.5,1)
hsv(1,.5,7)
hsv(1,.5,1)
hsv(50,.5,1)
hsv(.5,.5,1)
plot(hsv(.5,.5,1))
plot(clcolors('top')[10])
plot(clcolor('00FF00'))
plot(clcolor('01FF00'))
plot(clcolor('01FG00'))
plot(clcolor('FFFFF'))
plot(clcolor('808080'))
top <- clpalettes('top')
plot(top)
lll
top[5]
top[5]$colors
top$colors[1]
## Libraries
library(ggplot2)
library(grid)
library(dplyr)
library(reshape2)
library(stringr)
library(cowplot)
levels(as.factor(TFBS_df$alignment_file)) #500
## PhastCons - cons_score
cons_scores <- read.csv("../../data/outputs/subsettedData_1/sub_most_conserved_clean_13August2017.csv")
head(cons_scores)
## PhastCons - most conserved
most_conserved <- read.csv("../../data/outputs/subsettedData_1/sub_most_conserved_clean_13August2017.csv")
levels(most_conserved$alignment_file) #there are less than 500 levels because not all the files had conserved regions
head(most_conserved)
setwd("~/Dropbox/Research2/montium_analyses_2_conservation/r/subsetted_analysis")
## PhastCons - cons_score
cons_scores <- read.csv("../../data/outputs/subsettedData_1/sub_most_conserved_clean_13August2017.csv")
head(cons_scores)
## PhastCons - most conserved
most_conserved <- read.csv("../../data/outputs/subsettedData_1/sub_most_conserved_clean_13August2017.csv")
levels(most_conserved$alignment_file) #there are less than 500 levels because not all the files had conserved regions
head(most_conserved)
## TFBS and Kvon expression data
## Takes ~4 min to load
TFBS_df <- read.csv("../../data/outputs/combined_TFBS_kvon_13August2017.csv")
## TFBS and Kvon expression data
## Takes ~4 min to load
TFBS_df <- read.csv("../../data/outputs/combined_TFBS_kvon_13August2017.csv")
levels(as.factor(TFBS_df$alignment_file)) #500
levels(as.factor(TFBS_df$motif_file))
TFBS_df$positive_GAL4_anyStage <- gsub("1", "yes", TFBS_df$positive_GAL4_anyStage)
TFBS_df$positive_GAL4_anyStage <- gsub("0", "no", TFBS_df$positive_GAL4_anyStage)
unique(TFBS_df$redfly_name)
redfly <- TFBS_df[complete.cases(TFBS_df), ]
## Change Species Name
TFBS_df$species <- gsub("MEMB003C", "D. asahinai", TFBS_df$species)
TFBS_df$species <- gsub("MEMB002A", "D. rufa", TFBS_df$species)
TFBS_df$species <- gsub("MEMB002C", "D. lacteicornis", TFBS_df$species)
TFBS_df$species <- gsub("MEMB002D", "D. bunnanda", TFBS_df$species)
TFBS_df$species <- gsub("MEMB003B", "D. birch", TFBS_df$species)
TFBS_df$species <- gsub("MEMB002F", "D. pectinifera", TFBS_df$species)
TFBS_df$species <- gsub("MEMB003D", "D. bocki", TFBS_df$species)
TFBS_df$species <- gsub("MEMB003F", "D. jambulina", TFBS_df$species)
TFBS_df$species <- gsub("MEMB002E", "D. serrata", TFBS_df$species)
TFBS_df$strand <- gsub("positive strand", "+ strand", TFBS_df$strand)
TFBS_df$strand <- gsub("negative strand", "- strand", TFBS_df$strand)
levels(TFBS_df$motif_file)
bcd_cad_zel <- c("bcd_FlyReg", "cad_FlyReg", "zelda_")
TFBS1 <- subset(TFBS_df, motif_file == "bcd_cad_zel" & score > 6 )
TFBS2 <- subset(TFBS_df, motif_file == "hb_flyreg" & score > 4.5)
TFBS3 <- subset(TFBS_df, motif_file == "gt_nar2008" & score > 2.5)
TFBS4 <- subset(TFBS_df, motif_file == "kr_FlyReg" & score > 3.5)
TFBS_df_sub <- rbind(TFBS1, TFBS2, TFBS3, TFBS4)
head(TFBS_df_sub)
testMerge <- merge(TFBS_df_sub)
## "VT58684"
## Make a list of all the alignment_files available
alignmentTypes <- levels(TFBS_df$alignment_file)
randomFile <- sample(alignmentTypes, 1)
## Subset random file
TFBS_sub <- subset(TFBS_df_sub, alignment_file == randomFile)
## retrive grey square information
rect_sub <- subset(most_conserved, alignment_file == randomFile)
rects <- data.frame(xstart = rect_sub$align_start[1:nrow(rect_sub)], xend = rect_sub$align_end[1:nrow(rect_sub)])
## Create Title
myTitle <- paste0("\n ID:", TFBS_sub$alignment_file[1], "\n GAL4 expression: ", TFBS_sub$positive_GAL4_anyStage[1], "\n DNAse Peaks: ", TFBS_df$DNase_Peaks_sumStages[1], "\n")
plot1 <- ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
## Conservation probability plot
plot2 <- cons_scores %>% filter(alignment_file == randomFile) %>%
ggplot(., aes(align_position, post.prob)) +
geom_line() +
theme_classic() +
theme(text = element_text(size = 20))
## Put plots together and make purty
plot_grid(plot1, plot2, labels = c("A", "B"), nrow = 2, ncol = 1, align = "v", axis = "l", rel_heights = c(1, .4))
## Subset random file
TFBS_sub <- subset(TFBS_df_sub, alignment_file == randomFile)
## retrive grey square information
rect_sub <- subset(most_conserved, alignment_file == randomFile)
rects <- data.frame(xstart = rect_sub$align_start[1:nrow(rect_sub)], xend = rect_sub$align_end[1:nrow(rect_sub)])
## Create Title
myTitle <- paste0("\n ID:", TFBS_sub$alignment_file[1], "\n GAL4 expression: ", TFBS_sub$positive_GAL4_anyStage[1], "\n DNAse Peaks: ", TFBS_df$DNase_Peaks_sumStages[1], "\n")
plot1 <- ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
## Conservation probability plot
plot2 <- cons_scores %>% filter(alignment_file == randomFile) %>%
ggplot(., aes(align_position, post.prob)) +
geom_line() +
theme_classic() +
theme(text = element_text(size = 20))
## Put plots together and make purty
plot_grid(plot1, plot2, labels = c("A", "B"), nrow = 2, ncol = 1, align = "v", axis = "l", rel_heights = c(1, .4))
## alignment mapping plot
head(TFBS_sub)
randomFile <- sample(alignmentTypes, 1)
## Subset random file
TFBS_sub <- subset(TFBS_df_sub, alignment_file == randomFile)
## retrive grey square information
rect_sub <- subset(most_conserved, alignment_file == randomFile)
rects <- data.frame(xstart = rect_sub$align_start[1:nrow(rect_sub)], xend = rect_sub$align_end[1:nrow(rect_sub)])
## Create Title
myTitle <- paste0("\n ID:", TFBS_sub$alignment_file[1], "\n GAL4 expression: ", TFBS_sub$positive_GAL4_anyStage[1], "\n DNAse Peaks: ", TFBS_df$DNase_Peaks_sumStages[1], "\n")
## alignment mapping plot
head(TFBS_sub)
plot1 <- ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
## Conservation probability plot
plot2 <- cons_scores %>% filter(alignment_file == randomFile) %>%
ggplot(., aes(align_position, post.prob)) +
geom_line() +
theme_classic() +
theme(text = element_text(size = 20))
## Put plots together and make purty
plot_grid(plot1, plot2, labels = c("A", "B"), nrow = 2, ncol = 1, align = "v", axis = "l", rel_heights = c(1, .4))
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2) +
facet_grid(strand~.) +
geom_point(alpha = .4) +
theme_bw() +
annotate("rect", xmin = rects$xstart, xmax = rects$xend, ymin = -Inf, ymax = Inf, alpha = .2) +
labs(title = myTitle) +
theme(text = element_text(size = 17),
legend.position = "top",
legend.box = "vertical",
legend.box.just = "left",
legend.justification = c(0,1),
axis.text.x = element_blank(),
axis.text.y = element_text(hjust = 0)) +
labs(x = "") +
guides(colour = guide_legend(override.aes = list(size = 10)))
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2)
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2)
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2)
ggplot(TFBS_sub, aes(align_position, species, size = score, color = motif_file)) +
geom_point(alpha = .2)
